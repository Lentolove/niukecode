package zuoshen.topinterview;

/**
 * Author : tsp
 * Time: 2022/3/11 15:30
 * Desc : 请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 * <p>
 * 注意：
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 空白格用 '.' 表示。
 * <p>
 * 示例 1：
 * 输入：board =
 * [["5","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：true
 * <p>
 * 示例 2：
 * 输入：board =
 * [["8","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：false
 * 解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无
 * 效的。
 * <p>
 * 提示：
 * board.length == 9
 * board[i].length == 9
 * board[i][j] 是一位数字（1-9）或者 '.'
 * <p>
 * Related Topics 数组 哈希表 矩阵 👍 788 👎 0
 */
public class Problem_0036_ValidSudoku {


    /**
     * 给定一个数独，判断其是否有效：同一行，同一列，同一个九宫格不能出现重复的数字
     * 思路：用三个boolean二维矩阵类辅助处理，类似于预处理
     * boolean[][] row = new boolean[9][10]; row[2][7] 表示第3行是否可以放置数字 7
     * boolean[][] col = new boolean[9][10]; col[3][1] 表示第4列是否可以放置数字 1
     * boolean[][] bucket = new boolean[9][10]; bucket[1][1] 表示第2个给子是否可以放置数字1
     */
    public boolean isValidSudoku(char[][] board) {
        boolean[][] row = new boolean[9][10];
        boolean[][] col = new boolean[9][10];
        boolean[][] bucket = new boolean[9][10];
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                //计算位于哪个格子
                int Index = (i / 3) * 3 + (j / 3);
                if (board[i][j] != '.'){
                    int a = board[i][j] - '0';
                    //判断缓存表中是否出现过了
                    if (row[i][a] || col[j][a] || bucket[Index][a]) return false;
                    //把当前位置标记好，该位置已经放过某元素了
                    row[i][a] = true;
                    col[j][a] = true;
                    bucket[Index][a] = true;
                }
            }
        }
        return true;
    }
}
